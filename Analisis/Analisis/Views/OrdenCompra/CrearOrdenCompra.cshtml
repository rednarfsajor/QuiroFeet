@model Analisis.Models.OrdenCompraViewModel
@using Analisis.BD

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Crear Nueva Orden de Compra";

    if (Model?.Productos == null || !Model.Productos.Any())
    {
        Model.Productos = new List<Analisis.Models.DetalleOrdenVM> { new Analisis.Models.DetalleOrdenVM() };
    }
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
    .orden-container {
        max-width: 900px;
        margin: 40px auto;
        padding: 30px;
        background: #ffffff;
        border-radius: 15px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.07);
        font-family: 'Segoe UI', sans-serif;
        color: #234449;
    }

    h2 {
        text-align: center;
        color: #234449;
        font-size: 2.4em;
        margin-bottom: 25px;
    }

    .form-label {
        font-weight: 600;
        color: #234449;
    }

    .form-select, .form-control {
        border-radius: 8px;
        border: 1px solid #ccc;
        padding: 10px;
    }

    .producto-row {
        background: #f9f9f9;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 15px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.04);
    }

    .btn-primary-custom {
        background-color: #3e77f8;
        border: none;
        color: white !important;
        border-radius: 8px;
        padding: 10px 20px;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
        gap: 6px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        transition: background-color 0.3s ease;
        text-decoration: none;
    }

        .btn-primary-custom:hover {
            background-color: #234449;
        }

    .btn-remove {
        background-color: #b02a37;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 8px 10px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        transition: background-color 0.3s;
    }

        .btn-remove:hover {
            background-color: #7a1c24;
        }

    .total-display {
        text-align: center;
        font-size: 1.2em;
        font-weight: bold;
        margin-top: 25px;
        background: #eaf4fc;
        padding: 10px 20px;
        border-radius: 10px;
        border: 1px solid #cddfee;
        color: #234449;
    }

    .action-buttons {
        text-align: center;
        margin-top: 30px;
    }
</style>

<div class="orden-container">
    <h2><i class="bi bi-file-earmark-plus-fill"></i> @ViewBag.Title</h2>

    @using (Html.BeginForm("CrearOrdenCompra", "OrdenCompra", FormMethod.Post, new { @class = "mx-auto", style = "max-width:800px;" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

        <div class="mb-3">
            @Html.LabelFor(m => m.proveedor_id, htmlAttributes: new { @class = "form-label" })
            @Html.DropDownListFor(m => m.proveedor_id, (SelectList)ViewBag.Proveedores, "-- Seleccione --",
                new { @class = "form-select", required = "required", id = "proveedor-select" })
            @Html.ValidationMessageFor(m => m.proveedor_id, "", new { @class = "text-danger" })
        </div>

        <div class="mb-4">
            <label class="form-label">Fecha de Creación</label>
            <input type="text" class="form-control" value="@Model.fecha_creacion.ToString("dd/MM/yyyy HH:mm")" readonly />
        </div>

        <h4 class="text-primary mb-3"><i class="bi bi-box-seam-fill"></i> Productos</h4>

        <div id="productos-container">
            @for (int i = 0; i < Model.Productos.Count; i++)
            {
                var precio = Model.Productos[i].precio ?? "0.00";
                <div class="row g-2 align-items-end producto-row">
                    <div class="col-md-5">
                        <label class="form-label">Producto</label>
                        <select name="Productos[@i].id_producto" class="form-select producto-select" required>
                            <option value="">-- Seleccione un producto --</option>
                        </select>
                        @Html.ValidationMessage($"Productos[{i}].id_producto", "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Cantidad</label>
                        <input type="number" name="Productos[@i].qty" class="form-control" min="1" value="@Model.Productos[i].qty" required />
                        @Html.ValidationMessage($"Productos[{i}].qty", "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Precio Unitario</label>
                        <input type="text" class="form-control precio-mostrado" value="@precio" readonly />
                        <input type="hidden" name="Productos[@i].precio" class="precio-real" value="@precio" />
                        @Html.ValidationMessage($"Productos[{i}].precio", "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-2 text-end">
                        <button type="button" class="btn-remove" title="Eliminar">
                            <i class="bi bi-trash-fill"></i>
                        </button>
                    </div>
                </div>
            }
        </div>

        <button type="button" id="add-product-btn" class="btn-primary-custom mt-3">
            <i class="bi bi-plus-circle"></i> Agregar Producto
        </button>

        <div class="total-display mt-4">
            Total: <span id="totalGeneral">₡0.00</span>
        </div>

        <div class="action-buttons">
            <button type="submit" class="btn-primary-custom me-2">
                <i class="bi bi-save"></i> Guardar Orden
            </button>
            <a href="@Url.Action("ListarOrdenes", "OrdenCompra")" class="btn-primary-custom">
                <i class="bi bi-arrow-left-circle"></i> Cancelar
            </a>
        </div>
    }
</div>

<script>
    let productosDisponibles = [];

    function actualizarIndices() {
        const filas = document.querySelectorAll(".producto-row");
        filas.forEach((row, index) => {
            row.querySelector("select").setAttribute("name", `Productos[${index}].id_producto`);
            row.querySelector("input[name$='qty']").setAttribute("name", `Productos[${index}].qty`);
            row.querySelector(".precio-real").setAttribute("name", `Productos[${index}].precio`);
        });
    }

    function actualizarPrecioYTotal() {
        const filas = document.querySelectorAll(".producto-row");
        let total = 0;

        filas.forEach((row) => {
            const select = row.querySelector("select");
            const precioMostrado = row.querySelector(".precio-mostrado");
            const precioHidden = row.querySelector(".precio-real");
            const qtyInput = row.querySelector("input[name$='qty']");

            const selectedOption = select.options[select.selectedIndex];
            const precio = parseFloat(selectedOption?.getAttribute("data-precio")) || 0;
            const cantidad = parseInt(qtyInput.value) || 0;

            precioMostrado.value = precio.toFixed(2);
            precioHidden.value = precio.toFixed(2);
            total += precio * cantidad;
        });

        document.getElementById("totalGeneral").innerText = "₡" + total.toFixed(2);
    }

    function attachRemove(row) {
        row.querySelector(".btn-remove").addEventListener("click", function () {
            if (document.querySelectorAll(".producto-row").length > 1) {
                row.remove();
                actualizarIndices();
                actualizarPrecioYTotal();
            }
        });
    }

    document.getElementById("add-product-btn").addEventListener("click", function () {
        const container = document.getElementById("productos-container");
        const template = container.querySelector(".producto-row").cloneNode(true);

        template.querySelector("input[name$='qty']").value = 1;
        template.querySelector(".precio-mostrado").value = "0.00";
        template.querySelector(".precio-real").value = "0.00";

        const select = template.querySelector("select");
        select.innerHTML = '<option value="">-- Seleccione un producto --</option>';
        productosDisponibles.forEach(p => {
            const opt = document.createElement("option");
            opt.value = p.id;
            opt.setAttribute("data-precio", p.precio);
            opt.textContent = p.nombre;
            select.appendChild(opt);
        });

        container.appendChild(template);
        attachRemove(template);
        actualizarIndices();
    });

    document.getElementById("proveedor-select").addEventListener("change", function () {
        const proveedorId = this.value;
        if (!proveedorId || isNaN(proveedorId)) return;

        fetch(`/OrdenCompra/GetProductosPorProveedor?proveedorId=${proveedorId}`)
            .then(res => res.json())
            .then(data => {
                productosDisponibles = data;
                const selects = document.querySelectorAll(".producto-select");
                selects.forEach(select => {
                    select.innerHTML = '<option value="">-- Seleccione un producto --</option>';
                    productosDisponibles.forEach(p => {
                        const opt = document.createElement("option");
                        opt.value = p.id;
                        opt.setAttribute("data-precio", p.precio);
                        opt.textContent = p.nombre;
                        select.appendChild(opt);
                    });
                });

                actualizarPrecioYTotal();
            });
    });

    document.addEventListener("change", function (e) {
        if (e.target.matches("select[name^='Productos']") || e.target.matches("input[name^='Productos']")) {
            actualizarPrecioYTotal();
        }
    });

    attachRemove(document.querySelector(".producto-row"));
    actualizarIndices();
    actualizarPrecioYTotal();
</script>
